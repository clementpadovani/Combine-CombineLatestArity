name: 'Run Xcode Tests'
inputs:
  scheme:
    description: "The scheme for tests"
    required: true
  xcode_version:
    description: "The name of the Xcode version to use"
    required: true
  sdk:
    description: "The build SDK for the test"
    required: true
  platform:
    description: "The platform of the test destination"
    required: true
  device_name_prefix:
    description: "The prefix of the test destination"
    required: true
  test_os_version:
    description: "OS version of the test destination"
    required: false
    default: "REPLACE_ME"
  test_results_output_base_path:
    description: "The base path for the test results"
    required: true
outputs:
  html_test_results_path:
    description: "The path for the formatted test results"
runs:
  using: "composite"
  steps:
    - shell: bash
      id: create_variables
      run: |
        echo "::set-output name=test_destination::$(echo "${{ inputs.device_name_prefix }} os=${{ inputs.test_os_version }}" | tr " os=REPLACE_ME" "")"
        echo "::set-output name=html_test_results_output_path::${{ inputs.test_results_output_base_path }}/${{ inputs.platform }}-$(echo ${{ inputs.test_os_version }} | tr . _).html"
    - shell: bash
      id: run_tests
      run: |
        echo "will run: xcodebuild -scheme ${{ inputs.scheme }} -sdk ${{ inputs.sdk }} -destination "${{ steps.create_variables.outputs.test_destination }}" -disableAutomaticPackageResolution -enableCodeCoverage YES test" && \
        set -o pipefail && \
        xcodebuild -scheme ${{ inputs.scheme }} -sdk ${{ inputs.sdk }} -destination "${{ steps.create_variables.outputs.test_destination }}" -disableAutomaticPackageResolution -enableCodeCoverage YES test | \
        xcpretty -c -r html --output "${{ steps.create_variables.outputs.html_test_results_output_path }}"
